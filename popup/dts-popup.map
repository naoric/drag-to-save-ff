{"version":3,"sources":["../node_modules/lit-html/lit-html.js","../node_modules/lit-html/lib/lit-extended.js","dts-popup.tsx"],"names":["defaultTemplateFactory","render","templateCaches","Map","html","strings","values","TemplateResult","svg","SVGTemplateResult","constructor","type","partCallback","defaultPartCallback","getHTML","l","length","isTextBinding","i","s","closing","findTagClose","nodeMarker","marker","getTemplateElement","template","document","createElement","innerHTML","content","svgElement","firstChild","removeChild","reparentNodes","result","templateCache","get","undefined","set","Template","container","templateFactory","instance","__templateInstance","_partCallback","update","TemplateInstance","fragment","_clone","removeNodes","appendChild","String","Math","random","slice","markerRegex","RegExp","lastAttributeNameRegex","str","close","lastIndexOf","open","indexOf","TemplatePart","index","name","rawName","isTemplatePartActive","part","element","parts","walker","createTreeWalker","partIndex","nodesToRemove","previousNode","currentNode","nextNode","node","nodeType","hasAttributes","attributes","count","value","stringForPart","attributeNameInPart","exec","attribute","getNamedItem","stringsForAttributeValue","split","push","removeAttribute","nodeValue","parent","parentNode","lastIndex","insertBefore","createComment","createTextNode","previousSibling","Node","TEXT_NODE","nextSibling","n","getValue","isDirective","noChange","directive","f","__litDirective","o","directiveValue","isPrimitiveValue","AttributePart","size","_previousValues","_interpolate","startIndex","text","v","Array","isArray","Symbol","iterator","t","_equalToPreviousValues","setValue","join","setAttribute","NodePart","startNode","endNode","_previousValue","_setText","_setTemplateResult","_setIterable","_setNode","then","_setPromise","_insert","clear","textContent","_getTemplate","itemParts","item","itemPart","itemStart","previousPart","lastPart","templatePart","Error","getTemplate","_parts","valueIndex","cloneNode","partActive","start","end","before","extendedPartCallback","substr","eventName","EventPart","lastChar","BooleanAttributePart","PropertyPart","listener","_listener","removeEventListener","addEventListener","handleEvent","event","call"],"mappings":"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","file":"dts-popup.map","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n// The first argument to JS template tags retain identity across multiple\n// calls to a tag for the same literal, so we can cache work done per literal\n// in a Map.\nexport const templateCaches = new Map();\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html');\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg');\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, partCallback = defaultPartCallback) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.partCallback = partCallback;\n    }\n    /**\n     * Returns a string of HTML used to create a <template> element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isTextBinding = true;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            html += s;\n            // We're in a text position if the previous string closed its tags.\n            // If it doesn't have any tags, then we use the previous text position\n            // state.\n            const closing = findTagClose(s);\n            isTextBinding = closing > -1 ? closing < s.length : isTextBinding;\n            html += isTextBinding ? nodeMarker : marker;\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        template.innerHTML = this.getHTML();\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTMl in an <svg> tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the <svg> tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function defaultTemplateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = new Map();\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n        template = new Template(result, result.getTemplateElement());\n        templateCache.set(result.strings, template);\n    }\n    return template;\n}\n/**\n * Renders a template to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result a TemplateResult created by evaluating a template tag like\n *     `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param templateFactory a function to create a Template or retreive one from\n *     cache.\n */\nexport function render(result, container, templateFactory = defaultTemplateFactory) {\n    const template = templateFactory(result);\n    let instance = container.__templateInstance;\n    // Repeat render, just call update()\n    if (instance !== undefined && instance.template === template &&\n        instance._partCallback === result.partCallback) {\n        instance.update(result.values);\n        return;\n    }\n    // First render, create a new TemplateInstance and append it\n    instance =\n        new TemplateInstance(template, result.partCallback, templateFactory);\n    container.__templateInstance = instance;\n    const fragment = instance._clone();\n    instance.update(result.values);\n    removeNodes(container, container.firstChild);\n    container.appendChild(fragment);\n}\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nconst marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, not attribute positions,\n * in template.\n */\nconst nodeMarker = `<!--${marker}-->`;\nconst markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#attributes-0\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-character\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst lastAttributeNameRegex = /[ \\x09\\x0a\\x0c\\x0d]([^\\0-\\x1F\\x7F-\\x9F \\x09\\x0a\\x0c\\x0d\"'>=/]+)[ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*)$/;\n/**\n * Finds the closing index of the last closed HTML tag.\n * This has 3 possible return values:\n *   - `-1`, meaning there is no tag in str.\n *   - `string.length`, meaning the last opened tag is unclosed.\n *   - Some positive number < str.length, meaning the index of the closing '>'.\n */\nfunction findTagClose(str) {\n    const close = str.lastIndexOf('>');\n    const open = str.indexOf('<', close + 1);\n    return open > -1 ? str.length : close;\n}\n/**\n * A placeholder for a dynamic expression in an HTML template.\n *\n * There are two built-in part types: AttributePart and NodePart. NodeParts\n * always represent a single dynamic expression, while AttributeParts may\n * represent as many expressions are contained in the attribute.\n *\n * A Template's parts are mutable, so parts can be replaced or modified\n * (possibly to implement different template semantics). The contract is that\n * parts can only be replaced, not removed, added or reordered, and parts must\n * always consume the correct number of values in their `update()` method.\n *\n * TODO(justinfagnani): That requirement is a little fragile. A\n * TemplateInstance could instead be more careful about which values it gives\n * to Part.update().\n */\nexport class TemplatePart {\n    constructor(type, index, name, rawName, strings) {\n        this.type = type;\n        this.index = index;\n        this.name = name;\n        this.rawName = rawName;\n        this.strings = strings;\n    }\n}\nexport const isTemplatePartActive = (part) => part.index !== -1;\n/**\n * An updateable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const content = this.element.content;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(content, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n               NodeFilter.SHOW_TEXT */, null, false);\n        let index = -1;\n        let partIndex = 0;\n        const nodesToRemove = [];\n        // The actual previous node, accounting for removals: if a node is removed\n        // it will never be the previousNode.\n        let previousNode;\n        // Used to set previousNode at the top of the loop.\n        let currentNode;\n        while (walker.nextNode()) {\n            index++;\n            previousNode = currentNode;\n            const node = currentNode = walker.currentNode;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (!node.hasAttributes()) {\n                    continue;\n                }\n                const attributes = node.attributes;\n                // Per https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                // attributes are not guaranteed to be returned in document order. In\n                // particular, Edge/IE can return them out of order, so we cannot assume\n                // a correspondance between part index and attribute index.\n                let count = 0;\n                for (let i = 0; i < attributes.length; i++) {\n                    if (attributes[i].value.indexOf(marker) >= 0) {\n                        count++;\n                    }\n                }\n                while (count-- > 0) {\n                    // Get the template literal section leading up to the first\n                    // expression in this attribute\n                    const stringForPart = result.strings[partIndex];\n                    // Find the attribute name\n                    const attributeNameInPart = lastAttributeNameRegex.exec(stringForPart)[1];\n                    // Find the corresponding attribute\n                    // TODO(justinfagnani): remove non-null assertion\n                    const attribute = attributes.getNamedItem(attributeNameInPart);\n                    const stringsForAttributeValue = attribute.value.split(markerRegex);\n                    this.parts.push(new TemplatePart('attribute', index, attribute.name, attributeNameInPart, stringsForAttributeValue));\n                    node.removeAttribute(attribute.name);\n                    partIndex += stringsForAttributeValue.length - 1;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const nodeValue = node.nodeValue;\n                if (nodeValue.indexOf(marker) < 0) {\n                    continue;\n                }\n                const parent = node.parentNode;\n                const strings = nodeValue.split(markerRegex);\n                const lastIndex = strings.length - 1;\n                // We have a part for each match found\n                partIndex += lastIndex;\n                // Generate a new text node for each literal section\n                // These nodes are also used as the markers for node parts\n                for (let i = 0; i < lastIndex; i++) {\n                    parent.insertBefore((strings[i] === '')\n                        ? document.createComment('')\n                        : document.createTextNode(strings[i]), node);\n                    this.parts.push(new TemplatePart('node', index++));\n                }\n                parent.insertBefore(strings[lastIndex] === '' ?\n                    document.createComment('') :\n                    document.createTextNode(strings[lastIndex]), node);\n                nodesToRemove.push(node);\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */ &&\n                node.nodeValue === marker) {\n                const parent = node.parentNode;\n                // Add a new marker node to be the startNode of the Part if any of the\n                // following are true:\n                //  * We don't have a previousSibling\n                //  * previousSibling is being removed (thus it's not the\n                //    `previousNode`)\n                //  * previousSibling is not a Text node\n                //\n                // TODO(justinfagnani): We should be able to use the previousNode here\n                // as the marker node and reduce the number of extra nodes we add to a\n                // template. See https://github.com/PolymerLabs/lit-html/issues/147\n                const previousSibling = node.previousSibling;\n                if (previousSibling === null || previousSibling !== previousNode ||\n                    previousSibling.nodeType !== Node.TEXT_NODE) {\n                    parent.insertBefore(document.createComment(''), node);\n                }\n                else {\n                    index--;\n                }\n                this.parts.push(new TemplatePart('node', index++));\n                nodesToRemove.push(node);\n                // If we don't have a nextSibling add a marker node.\n                // We don't have to check if the next node is going to be removed,\n                // because that node will induce a new marker if so.\n                if (node.nextSibling === null) {\n                    parent.insertBefore(document.createComment(''), node);\n                }\n                else {\n                    index--;\n                }\n                currentNode = previousNode;\n                partIndex++;\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\n/**\n * Returns a value ready to be inserted into a Part from a user-provided value.\n *\n * If the user value is a directive, this invokes the directive with the given\n * part. If the value is null, it's converted to undefined to work better\n * with certain DOM APIs, like textContent.\n */\nexport const getValue = (part, value) => {\n    // `null` as the value of a Text node will render the string 'null'\n    // so we convert it to undefined\n    if (isDirective(value)) {\n        value = value(part);\n        return noChange;\n    }\n    return value === null ? undefined : value;\n};\nexport const directive = (f) => {\n    f.__litDirective = true;\n    return f;\n};\nconst isDirective = (o) => typeof o === 'function' && o.__litDirective === true;\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * @deprecated Use `noChange` instead.\n */\nexport { noChange as directiveValue };\nconst isPrimitiveValue = (value) => value === null ||\n    !(typeof value === 'object' || typeof value === 'function');\nexport class AttributePart {\n    constructor(instance, element, name, strings) {\n        this.instance = instance;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.size = strings.length - 1;\n        this._previousValues = [];\n    }\n    _interpolate(values, startIndex) {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const v = getValue(this, values[startIndex + i]);\n            if (v && v !== noChange &&\n                (Array.isArray(v) || typeof v !== 'string' && v[Symbol.iterator])) {\n                for (const t of v) {\n                    // TODO: we need to recursively call getValue into iterables...\n                    text += t;\n                }\n            }\n            else {\n                text += v;\n            }\n        }\n        return text + strings[l];\n    }\n    _equalToPreviousValues(values, startIndex) {\n        for (let i = startIndex; i < startIndex + this.size; i++) {\n            if (this._previousValues[i] !== values[i] ||\n                !isPrimitiveValue(values[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    setValue(values, startIndex) {\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        const s = this.strings;\n        let value;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n            if (Array.isArray(value)) {\n                value = value.join('');\n            }\n        }\n        else {\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== noChange) {\n            this.element.setAttribute(this.name, value);\n        }\n        this._previousValues = values;\n    }\n}\nexport class NodePart {\n    constructor(instance, startNode, endNode) {\n        this.instance = instance;\n        this.startNode = startNode;\n        this.endNode = endNode;\n        this._previousValue = undefined;\n    }\n    setValue(value) {\n        value = getValue(this, value);\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitiveValue(value)) {\n            // Handle primitive values\n            // If the value didn't change, do nothing\n            if (value === this._previousValue) {\n                return;\n            }\n            this._setText(value);\n        }\n        else if (value instanceof TemplateResult) {\n            this._setTemplateResult(value);\n        }\n        else if (Array.isArray(value) || value[Symbol.iterator]) {\n            this._setIterable(value);\n        }\n        else if (value instanceof Node) {\n            this._setNode(value);\n        }\n        else if (value.then !== undefined) {\n            this._setPromise(value);\n        }\n        else {\n            // Fallback, will render the string representation\n            this._setText(value);\n        }\n    }\n    _insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    _setNode(value) {\n        if (this._previousValue === value) {\n            return;\n        }\n        this.clear();\n        this._insert(value);\n        this._previousValue = value;\n    }\n    _setText(value) {\n        const node = this.startNode.nextSibling;\n        value = value === undefined ? '' : value;\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === Node.TEXT_NODE) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if _previousValue is\n            // primitive?\n            node.textContent = value;\n        }\n        else {\n            this._setNode(document.createTextNode(value));\n        }\n        this._previousValue = value;\n    }\n    _setTemplateResult(value) {\n        const template = this.instance._getTemplate(value);\n        let instance;\n        if (this._previousValue && this._previousValue.template === template) {\n            instance = this._previousValue;\n        }\n        else {\n            instance = new TemplateInstance(template, this.instance._partCallback, this.instance._getTemplate);\n            this._setNode(instance._clone());\n            this._previousValue = instance;\n        }\n        instance.update(value.values);\n    }\n    _setIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _previousValue is an array, then the previous render was of an\n        // iterable and _previousValue will contain the NodeParts from the previous\n        // render. If _previousValue is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this._previousValue)) {\n            this.clear();\n            this._previousValue = [];\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this._previousValue;\n        let partIndex = 0;\n        for (const item of value) {\n            // Try to reuse an existing part\n            let itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                // If we're creating the first item part, it's startNode should be the\n                // container's startNode\n                let itemStart = this.startNode;\n                // If we're not creating the first part, create a new separator marker\n                // node, and fix up the previous part's endNode to point to it\n                if (partIndex > 0) {\n                    const previousPart = itemParts[partIndex - 1];\n                    itemStart = previousPart.endNode = document.createTextNode('');\n                    this._insert(itemStart);\n                }\n                itemPart = new NodePart(this.instance, itemStart, this.endNode);\n                itemParts.push(itemPart);\n            }\n            itemPart.setValue(item);\n            partIndex++;\n        }\n        if (partIndex === 0) {\n            this.clear();\n            this._previousValue = undefined;\n        }\n        else if (partIndex < itemParts.length) {\n            const lastPart = itemParts[partIndex - 1];\n            // Truncate the parts array so _previousValue reflects the current state\n            itemParts.length = partIndex;\n            this.clear(lastPart.endNode.previousSibling);\n            lastPart.endNode = this.endNode;\n        }\n    }\n    _setPromise(value) {\n        this._previousValue = value;\n        value.then((v) => {\n            if (this._previousValue === value) {\n                this.setValue(v);\n            }\n        });\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\nexport const defaultPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        return new AttributePart(instance, node, templatePart.name, templatePart.strings);\n    }\n    else if (templatePart.type === 'node') {\n        return new NodePart(instance, node, node.nextSibling);\n    }\n    throw new Error(`Unknown part type ${templatePart.type}`);\n};\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, partCallback, getTemplate) {\n        this._parts = [];\n        this.template = template;\n        this._partCallback = partCallback;\n        this._getTemplate = getTemplate;\n    }\n    update(values) {\n        let valueIndex = 0;\n        for (const part of this._parts) {\n            if (!part) {\n                valueIndex++;\n            }\n            else if (part.size === undefined) {\n                part.setValue(values[valueIndex]);\n                valueIndex++;\n            }\n            else {\n                part.setValue(values, valueIndex);\n                valueIndex += part.size;\n            }\n        }\n    }\n    _clone() {\n        // Clone the node, rather than importing it, to keep the fragment in the\n        // template's document. This leaves the fragment inert so custom elements\n        // won't upgrade until after the main document adopts the node.\n        const fragment = this.template.element.content.cloneNode(true);\n        const parts = this.template.parts;\n        if (parts.length > 0) {\n            // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be\n            // null\n            const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_COMMENT |\n                   NodeFilter.SHOW_TEXT */, null, false);\n            let index = -1;\n            for (let i = 0; i < parts.length; i++) {\n                const part = parts[i];\n                const partActive = isTemplatePartActive(part);\n                // An inactive part has no coresponding Template node.\n                if (partActive) {\n                    while (index < part.index) {\n                        index++;\n                        walker.nextNode();\n                    }\n                }\n                this._parts.push(partActive ? this._partCallback(this, part, walker.currentNode) : undefined);\n            }\n        }\n        return fragment;\n    }\n}\n/**\n * Reparents nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), into another container (could be the same container), before\n * `beforeNode`. If `beforeNode` is null, it appends the nodes to the\n * container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    let node = start;\n    while (node !== end) {\n        const n = node.nextSibling;\n        container.insertBefore(node, before);\n        node = n;\n    }\n};\n/**\n * Removes nodes, starting from `startNode` (inclusive) to `endNode`\n * (exclusive), from `container`.\n */\nexport const removeNodes = (container, startNode, endNode = null) => {\n    let node = startNode;\n    while (node !== endNode) {\n        const n = node.nextSibling;\n        container.removeChild(node);\n        node = n;\n    }\n};\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, defaultPartCallback, noChange, getValue, SVGTemplateResult, TemplateResult } from '../lit-html.js';\nexport { render } from '../lit-html.js';\n/**\n * Interprets a template literal as a lit-extended HTML template.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', extendedPartCallback);\n/**\n * Interprets a template literal as a lit-extended SVG template.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', extendedPartCallback);\n/**\n * A PartCallback which allows templates to set properties and declarative\n * event handlers.\n *\n * Properties are set by default, instead of attributes. Attribute names in\n * lit-html templates preserve case, so properties are case sensitive. If an\n * expression takes up an entire attribute value, then the property is set to\n * that value. If an expression is interpolated with a string or other\n * expressions then the property is set to the string result of the\n * interpolation.\n *\n * To set an attribute instead of a property, append a `$` suffix to the\n * attribute name.\n *\n * Example:\n *\n *     html`<button class$=\"primary\">Buy Now</button>`\n *\n * To set an event handler, prefix the attribute name with `on-`:\n *\n * Example:\n *\n *     html`<button on-click=${(e)=> this.onClickHandler(e)}>Buy Now</button>`\n *\n */\nexport const extendedPartCallback = (instance, templatePart, node) => {\n    if (templatePart.type === 'attribute') {\n        if (templatePart.rawName.substr(0, 3) === 'on-') {\n            const eventName = templatePart.rawName.slice(3);\n            return new EventPart(instance, node, eventName);\n        }\n        const lastChar = templatePart.name.substr(templatePart.name.length - 1);\n        if (lastChar === '$') {\n            const name = templatePart.name.slice(0, -1);\n            return new AttributePart(instance, node, name, templatePart.strings);\n        }\n        if (lastChar === '?') {\n            const name = templatePart.name.slice(0, -1);\n            return new BooleanAttributePart(instance, node, name, templatePart.strings);\n        }\n        return new PropertyPart(instance, node, templatePart.rawName, templatePart.strings);\n    }\n    return defaultPartCallback(instance, templatePart, node);\n};\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            const value = getValue(this, values[startIndex]);\n            if (value === noChange) {\n                return;\n            }\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n        }\n        else {\n            throw new Error('boolean attributes can only contain a single expression');\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n    setValue(values, startIndex) {\n        const s = this.strings;\n        let value;\n        if (this._equalToPreviousValues(values, startIndex)) {\n            return;\n        }\n        if (s.length === 2 && s[0] === '' && s[1] === '') {\n            // An expression that occupies the whole attribute value will leave\n            // leading and trailing empty strings.\n            value = getValue(this, values[startIndex]);\n        }\n        else {\n            // Interpolation, so interpolate\n            value = this._interpolate(values, startIndex);\n        }\n        if (value !== noChange) {\n            this.element[this.name] = value;\n        }\n        this._previousValues = values;\n    }\n}\nexport class EventPart {\n    constructor(instance, element, eventName) {\n        this.instance = instance;\n        this.element = element;\n        this.eventName = eventName;\n    }\n    setValue(value) {\n        const listener = getValue(this, value);\n        if (listener === this._listener) {\n            return;\n        }\n        if (listener == null) {\n            this.element.removeEventListener(this.eventName, this);\n        }\n        else if (this._listener == null) {\n            this.element.addEventListener(this.eventName, this);\n        }\n        this._listener = listener;\n    }\n    handleEvent(event) {\n        if (typeof this._listener === 'function') {\n            this._listener.call(this.element, event);\n        }\n        else if (typeof this._listener.handleEvent === 'function') {\n            this._listener.handleEvent(event);\n        }\n    }\n}\n//# sourceMappingURL=lit-extended.js.map","import { html, render } from 'lit-html/lib/lit-extended';\ndeclare var browser: any;\n\nconst s = (sel: string) => document.querySelector(sel);\nconst sa = (sel: string) => document.querySelectorAll(sel);\n\ninterface LinkItem {\n  link: string;\n  title: string;\n}\n\ninterface ListItemProps {\n  item: LinkItem;\n  del: () => void;\n}\n\ninterface ListProps {\n  items: LinkItem[];\n  clicked: (idx: number) => void;\n  clear: () => void;\n  clipboard: () => void;\n}\n\ninterface LinkStorage {\n  links: LinkItem[];\n}\n\nfunction ListItem(props: ListItemProps) {\n  return html`\n<li class=\"lc-item\">\n<a href=\"${props.item.link}\" class=\"lc-link\" target=\"_blank\">\n<span class=\"lc-title\">${props.item.title}</span>\n<i href=\"\" class=\"lc-checked fas fa-trash\" onclick=${(e: any) => {\n    e.preventDefault();\n    props.del();\n  }}></i>\n</a>\n</li>\n`;\n}\n\nfunction List(props: ListProps) {\n  return html`\n<ul class=\"lc-list\">\n${props.items.map((ln, idx) =>\n    ListItem({ item: ln, del: () => props.clicked(idx) })\n  )}\n</ul>\n<div class=\"lc-actions\">\n<button class=\"lc-clipboard lc-btn-basic\" onclick=${\n    props.clipboard\n  }>Copy All</button>\n<button class=\"lc-clear lc-btn-basic\" onclick=${props.clear}>Clear</button>\n</div>\n`;\n}\n\nbrowser.storage.sync.get({ links: [] }, (res: LinkStorage) =>\n  update(res.links)\n);\n\nbrowser.storage.onChanged.addListener(\n  (values: { links: { newValue: LinkItem[] } }) => update(values.links.newValue)\n);\n\nconst container = getContainer()!;\nconst addCurrent = s('.lc-add-current')!;\ndocument.body.appendChild(container);\n\naddCurrent.addEventListener('click', e => {\n  browser.tabs\n    .query({ active: true })\n    .then(([tab]: any) => {\n      const { url: link, title } = tab;\n      const linkToSave = { link, title };\n      browser.runtime.sendMessage({\n        type: 'add-link',\n        link: linkToSave\n      });\n    })\n    .catch(console.log);\n\n  e.preventDefault();\n});\n\nfunction getContainer() {\n  return s('.lc-container');\n}\n\nfunction update(items: LinkItem[] = []) {\n  const clicked = (index: number) =>\n    browser.runtime.sendMessage({ type: 'remove-link', index });\n  const clipboard = () => {\n    const input: HTMLInputElement = s(\n      '.lc-clipboard-input'\n    ) as HTMLInputElement;\n    if (!input) {\n      return;\n    }\n    input.value = itemsToString(items);\n    input.select();\n    document.execCommand('copy');\n  };\n\n  const clear = () => browser.runtime.sendMessage({ type: 'clear-links' });\n\n  const template = List({ items, clicked, clear, clipboard });\n  render(template, container);\n}\n\nfunction itemsToString(items: LinkItem[]) {\n  return items.map(it => it.link).join('\\n');\n}\n"]}